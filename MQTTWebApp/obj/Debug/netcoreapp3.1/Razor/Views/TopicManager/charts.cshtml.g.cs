#pragma checksum "C:\Users\vantr\Desktop\netzero\MQTTWebApp\Views\TopicManager\charts.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "9f33b419aa9c5b35c350a199435ca28f245800f6"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_TopicManager_charts), @"mvc.1.0.view", @"/Views/TopicManager/charts.cshtml")]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "C:\Users\vantr\Desktop\netzero\MQTTWebApp\Views\_ViewImports.cshtml"
using MQTTWebApp;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Users\vantr\Desktop\netzero\MQTTWebApp\Views\_ViewImports.cshtml"
using MQTTWebApp.Models;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"9f33b419aa9c5b35c350a199435ca28f245800f6", @"/Views/TopicManager/charts.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"14b89f13efb73e62b556075767f46ec67efd2a8c", @"/Views/_ViewImports.cshtml")]
    public class Views_TopicManager_charts : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    {
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_0 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("rel", new global::Microsoft.AspNetCore.Html.HtmlString("stylesheet"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_1 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("href", new global::Microsoft.AspNetCore.Html.HtmlString("~/lib/bootstrap/dist/css/bootstrap.min.css"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_2 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/js/Chart.min.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_3 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/js/apexcharts.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_4 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/js/axios.min.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_5 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/js/download.min.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        #line hidden
        #pragma warning disable 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperExecutionContext __tagHelperExecutionContext;
        #pragma warning restore 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner __tagHelperRunner = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner();
        #pragma warning disable 0169
        private string __tagHelperStringValueBuffer;
        #pragma warning restore 0169
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __backed__tagHelperScopeManager = null;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __tagHelperScopeManager
        {
            get
            {
                if (__backed__tagHelperScopeManager == null)
                {
                    __backed__tagHelperScopeManager = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager(StartTagHelperWritingScope, EndTagHelperWritingScope);
                }
                return __backed__tagHelperScopeManager;
            }
        }
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.HeadTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_HeadTagHelper;
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper;
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
            WriteLiteral(@"

<style>

    body {
        background: #1B213B;
        color: #777;
        font-family: Montserrat, Arial, sans-serif;
    }

    .body-bg {
        background: #F3F4FA !important;
    }

    h1, h2, h3, h4, h5, h6, strong {
        font-weight: 600;
    }

    .sparkboxes .box1 {
        background-image: linear-gradient( 135deg, #f2f2f2 10%, #a6a6a6 100%);
    }

    .sparkboxes .box2 {
        background-image: linear-gradient( 135deg, #f2f2f2 10%, #a6a6a6 100%);
    }

    .sparkboxes .box3 {
        background-image: linear-gradient( 135deg, #f2f2f2 10%, #a6a6a6 100%);
    }

    .sparkboxes .box4 {
        background-image: linear-gradient( 135deg, #ff6666 10%, #ff1a1a 100%);
        max-height: 128px;
    }

    .box .apexcharts-xaxistooltip {
        background: #800000;
        color: #ff6666;
    }

    .content-area {
        max-width: 1280px;
        margin: 0 auto;
    }

    .box {
        background-color: #262D47;
        padding: 25px 25px;");
            WriteLiteral(@"
        border-radius: 4px;
    }

    .columnbox {
        padding-right: 15px;
        background: #737373;
    }

    .radialbox {
        max-height: 333px;
        margin-bottom: 60px;
    }

    .apexcharts-legend-series tspan:nth-child(3) {
        font-weight: bold;
        font-size: 20px;
    }

    .edit-on-codepen {
        text-align: right;
        width: 100%;
        padding: 0 20px 40px;
        position: relative;
        top: -30px;
        cursor: pointer;
    }

    /* fusionexport btn CSS START */
    #fusionexport-btn {
        min-width: 169px;
        min-height: 38px;
        text-align: center;
    }

        #fusionexport-btn .span {
            display: inline-block;
        }

        #fusionexport-btn[disabled] {
            cursor: wait;
        }

    .spinner-border {
        display: none;
    }

    #fusionexport-btn[disabled] .spinner-border {
        display: inline-block;
    }

    #fusionexport-btn[disabled] .btn-text");
            WriteLiteral(" {\r\n        display: none;\r\n    }\r\n</style>\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("head", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "9f33b419aa9c5b35c350a199435ca28f245800f67550", async() => {
                WriteLiteral("\r\n    <meta charset=\"UTF-8\" />\r\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\r\n    <title> Dashboard - Dark Style</title>\r\n    ");
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("link", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "9f33b419aa9c5b35c350a199435ca28f245800f68041", async() => {
                }
                );
                __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_0);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_1);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                WriteLiteral("\r\n\r\n");
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_HeadTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.HeadTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_HeadTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"

<h3>Sensor Data</h3>


<div id=""wrapper"">
    <div class=""content-area"">
        <div class=""container-fluid"">
            <div class=""text-right mt-3 mb-3 d-fixed"">
                <a href=""./charts""
                   target=""_blank""
                   class=""btn btn-success mr-2"">
                    <span class=""btn-text""> Refresh </span>
                </a>
            </div>
            <div class=""main"">
                <div class=""row sparkboxes mt-4"">
                    <div class=""col-md-3"">
                        <div class=""box box1"">
                            <div class=""details"">
                                <h3 id=""spark1Amount"">0</h3>
                                <h4>Total AirCon</h4>
                            </div>
                            <div id=""spark1""></div>
                        </div>
                    </div>
                    <div class=""col-md-3"">
                        <div class=""box box2"">
                            <div class");
            WriteLiteral(@"=""details"">
                                <h3 id=""spark2Amount"">0</h3>
                                <h4>Active AirCon</h4>
                            </div>
                            <div id=""spark2""></div>
                        </div>
                    </div>
                    <div class=""col-md-3"">
                        <div class=""box box3"">
                            <div class=""details"">
                                <h3 id=""spark3Amount"">0</h3>
                                <h4>Inactive AirCon</h4>
                            </div>
                            <div id=""spark3""></div>
                        </div>
                    </div>
                    <div class=""col-md-3"">
                        <div class=""box box4"">
                            <div class=""details"">
                                <h3 id=""spark4Amount"">0</h3>
                                <h4>Faulty AirCon</h4>
                            </div>
                            <div id");
            WriteLiteral(@"=""spark4""></div>
                        </div>
                    </div>
                    <div id=""spark4""></div>
                </div>
            </div>
        </div>
        <br />
        <section class=""p-3 border border-primary"">
            <div class=""row"">

                <div class=""col-md-1"">
                    <div class=""box columnbox mt-4"" hidden>

                    </div>
                </div>

                <div class=""col-md-10"">
                    <div class=""box columnbox mt-4"">
                        <div id=""columnchart""> </div>
                    </div>
                </div>
            </div>
        </section>

        <!-- <div class=""row mt-5"">
            <div class=""col-md-6"">
                <div class=""box columnbox mt-4"">
                    <div id=""columnchart""> </div>
                </div>
            </div>
            <div class=""col-md-6"">
                <div class=""box  mt-4"">
                    <div id=""linechart""> </");
            WriteLiteral(@"div>
                </div>
            </div>
        </div>


        <div class=""row"">
            <div class=""col-md-6"">
                <div class=""box radialbox mt-4"">
                    <div id=""circlechart""> </div>
                </div>
            </div>
            <div class=""col-md-6"">
                <div class=""box mt-4"">
                    <div class=""mt-4"">
                        <div id=""progress1""> </div>
                    </div>
                    <div class=""mt-4"">
                        <div id=""progress2""> </div>
                    </div>
                    <div class=""mt-4"">
                        <div id=""progress3""> </div>
                    </div>
                </div>
            </div>
        </div>-->
");
            WriteLiteral("    </div>\r\n</div>\r\n\r\n \r\n<div style=\"width:1000px;height:800px\">\r\n    <canvas id=\"canvas\"> </canvas>\r\n</div>\r\n\r\n\r\n<div style=\"width:1000px;height:800px\">\r\n    <canvas id=\"canvas2\"> </canvas>\r\n</div>\r\n\r\n<div id=\"chart\">\r\n</div>\r\n");
            DefineSection("Scripts", async() => {
                WriteLiteral("\r\n\r\n    ");
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "9f33b419aa9c5b35c350a199435ca28f245800f614387", async() => {
                }
                );
                __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_2);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                WriteLiteral("\r\n    ");
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "9f33b419aa9c5b35c350a199435ca28f245800f615487", async() => {
                }
                );
                __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_3);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                WriteLiteral("\r\n    <!-- installing few libraries -->\r\n    ");
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "9f33b419aa9c5b35c350a199435ca28f245800f616628", async() => {
                }
                );
                __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_4);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                WriteLiteral("\r\n    ");
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "9f33b419aa9c5b35c350a199435ca28f245800f617728", async() => {
                }
                );
                __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_5);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                WriteLiteral(@"
    <script>

        function getCookie(cookieName) {
            let cookie = {};
            document.cookie.split(';').forEach(function (el) {
                let [key, value] = el.split('=');
                cookie[key.trim()] = value;
            })
            return cookie[cookieName];
        }

        const user = getCookie('user')
        if (user === null || user === '' || user === undefined) {
            location.href = ""/Login"";
        }

        window.Apex = {
            chart: {
                foreColor: '#ccc',
                toolbar: {
                    show: false
                },
            },
            stroke: {
                width: 3
            },
            dataLabels: {
                enabled: false
            },
            tooltip: {
                theme: 'dark'
            },
            grid: {
                borderColor: ""#535A6C"",
                xaxis: {
                    lines: {
                        show: true
 ");
                WriteLiteral(@"                   }
                }
            }
        };
        var spark1 = {
            chart: {
                id: 'spark1',
                group: 'sparks',
                type: 'line',
                height: 80,
                sparkline: {
                    enabled: true
                },
                dropShadow: {
                    enabled: true,
                    top: 1,
                    left: 1,
                    blur: 2,
                    opacity: 0.2,
                }
            },
            series: [{
                data: [25, 66, 41, 59, 25, 44, 12, 36, 9, 21]
            }],
            stroke: {
                curve: 'smooth'
            },
            markers: {
                size: 0
            },
            grid: {
                padding: {
                    top: 20,
                    bottom: 10,
                    left: 110
                }
            },
            colors: ['#fff'],
            tooltip: {
");
                WriteLiteral(@"                x: {
                    show: true
                },
                y: {
                    title: {
                        formatter: function formatter(val) {
                            return '';
                        }
                    }
                }
            }
        }
        var spark2 = {
            chart: {
                id: 'spark2',
                group: 'sparks',
                type: 'line',
                height: 80,
                sparkline: {
                    enabled: true
                },
                dropShadow: {
                    enabled: true,
                    top: 1,
                    left: 1,
                    blur: 2,
                    opacity: 0.2,
                }
            },
            series: [{
                data: [12, 14, 2, 47, 32, 44, 14, 55, 41, 69]
            }],
            stroke: {
                curve: 'smooth'
            },
            grid: {
                paddin");
                WriteLiteral(@"g: {
                    top: 20,
                    bottom: 10,
                    left: 110
                }
            },
            markers: {
                size: 0
            },
            colors: ['#fff'],
            tooltip: {
                x: {
                    show: false
                },
                y: {
                    title: {
                        formatter: function formatter(val) {
                            return '';
                        }
                    }
                }
            }
        }
        var spark3 = {
            chart: {
                id: 'spark3',
                group: 'sparks',
                type: 'line',
                height: 80,
                sparkline: {
                    enabled: true
                },
                dropShadow: {
                    enabled: true,
                    top: 1,
                    left: 1,
                    blur: 2,
                    opacity: 0.2,");
                WriteLiteral(@"
                }
            },
            series: [{
                data: [47, 45, 74, 32, 56, 31, 44, 33, 45, 19]
            }],
            stroke: {
                curve: 'smooth'
            },
            markers: {
                size: 0
            },
            grid: {
                padding: {
                    top: 20,
                    bottom: 10,
                    left: 110
                }
            },
            colors: ['#fff'],
            xaxis: {
                crosshairs: {
                    width: 1
                },
            },
            tooltip: {
                x: {
                    show: false
                },
                y: {
                    title: {
                        formatter: function formatter(val) {
                            return '';
                        }
                    }
                }
            }
        }

        var spark4 = {
            chart: {
                id: '");
                WriteLiteral(@"spark4',
                group: 'sparks',
                type: 'line',
                height: 80,
                sparkline: {
                    enabled: true
                },
                dropShadow: {
                    enabled: true,
                    top: 1,
                    left: 1,
                    blur: 2,
                    opacity: 0.2,
                }
            },
            series: [{
                data: [15, 75, 47, 65, 14, 32, 19, 54, 44, 61]
            }],
            stroke: {
                curve: 'smooth'
            },
            markers: {
                size: 0
            },
            grid: {
                padding: {
                    top: 20,
                    bottom: 10,
                    left: 110
                }
            },
            colors: ['#fff'],
            xaxis: {
                crosshairs: {
                    width: 1
                },
            },
            tooltip: {
               ");
                WriteLiteral(@" x: {
                    show: false
                },
                y: {
                    title: {
                        formatter: function formatter(val) {
                            return '';
                        }
                    }
                }
            }
        }
       // new ApexCharts(document.querySelector(""#spark1""), spark1).render();
       /// new ApexCharts(document.querySelector(""#spark2""), spark2).render();
      //  new ApexCharts(document.querySelector(""#spark3""), spark3).render();
       // new ApexCharts(document.querySelector(""#spark4""), spark4).render();
    window.Apex = {
        chart: {
                foreColor: '#fff',
                toolbar: {
                    show: false
                },
            },
            colors: ['#FCCF31', '#17ead9', '#f02fc2'],
            stroke: {
                width: 3
            },
            dataLabels: {
                enabled: false
            },
            grid: {
         ");
                WriteLiteral(@"       borderColor: ""#40475D"",
            },

            xaxis: {
                axisTicks: {
                    color: '#333'
                },
                axisBorder: {
                    color: ""#333""
                }
            },
            fill: {
                type: 'gradient',
                gradient: {
                    gradientToColors: ['#F55555', '#6078ea', '#6094ea']
                },
            },
            tooltip: {
                theme: 'dark',
                style: {
                    fontSize: '17px',
                    fontFamily: undefined
                },
                onDatasetHover: {
                    highlightDataSeries: true,
                },
                x: {
                    show: true,
                    formatter: undefined
                   }
             },
            yaxis: {
                decimalsInFloat: 2,
                opposite: true,
                labels: {
                    offsetX: -");
                WriteLiteral(@"10
                }
            }
        };
        var optionsColumn = {
            chart: {
                width: '95%',

                type: 'bar',
                events: {
                    animationEnd:  function (chartCtx, opts) {
                        window.setInterval(function () {
                            var url = '/TopicManager/GetChartsList';
                            $.getJSON(url, function (res) {
                                console.log(res);
                                var count = res.map(function (e) {
                                    var allcount = e.Note;
                                    const words = allcount.split('KING');
                                    document.getElementById(""spark1Amount"").innerHTML = words[0];
                                    document.getElementById(""spark2Amount"").innerHTML = words[1];
                                    document.getElementById(""spark3Amount"").innerHTML = words[2];
                           ");
                WriteLiteral(@"         document.getElementById(""spark4Amount"").innerHTML = words[3];
                                    return e.Note;
                                });
                                var labels = res.map(function (e) {
                                    return e.Campus + '-' + e.Building + '-' + e.Room + ' ' + e.Reason + ""  "" + "" SetTemp "" + e.SetTemperature + "" RoomTemp "" + e.RoomTemperature + "" Humidity "" + e.Humidity + "" Battery "" + e.BatteryPercentage + "" Power "" + e.PowerOnOff + "" Id "" + e.SensorId;
                                });
                                var data = res.map(function (e) {
                                    return e.RoomTemperature;
                                });
                                console.log(labels);
                                console.log(res);
                                chartCtx.updateOptions({
                                    series: [{
                                        data: data
                                  ");
                WriteLiteral(@"  }],
                                    xaxis: {
                                        categories: labels
                                    },
                                    subtitle: {
                                        text: 'Air Con Temperature °C',
                                                      style: {
                                                          fontSize: '17px'
                                        },
                                        align: 'bottom',
                                    }
                                }, false, false);
                            });
                        }, 2000)
                    }
                },
                toolbar: {
                    show: true
                },
                bar: {
                    barHeight: '10%'
                },
                zoom: {
                    enabled: true
                }
            },
            dataLabels: {
                enabled");
                WriteLiteral(@": true,
                textAnchor: 'start',
                style: {
                    colors: ['#fff']
                },
                formatter: function (val, opt) {
                    return opt.w.globals.labels[opt.dataPointIndex]
                },
                offsetX: 0,
                dropShadow: {
                    enabled: true
                }
            },

            plotOptions: {
                bar: {
                    barHeight: '80%',
                    distributed: false,
                    horizontal: true,
                    dataLabels: {
                        position: 'bottom'
                    },
                }
            },
            stroke: {
                width: 0,
            },
            series: [{
                name: 'Temperature °C' ,
                data: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
            }],
            title: {
                text: 'Building Rooms',
                align: 'left',
");
                WriteLiteral(@"                style: {
                    fontSize: '16px'
                }
            },
            subtitle: {
                text: 'Loading',
                floating: true,
                align: 'right',
                offsetY: 0,
                style: {
                    fontSize: '22px'
                }
            },
            fill: {
                type: 'gradient',
                gradient: {
                    shade: 'dark',
                    type: 'vertical',
                    shadeIntensity: 0.5,
                    inverseColors: false,
                    opacityFrom: 1,
                    opacityTo: 0.8,
                    stops: [0, 100]
                }
            },
            xaxis: {
                labels: {
                    show: true
                },
                type: 'category',
                categories: ['', '', '', '', '', '', '', '', '', '', '', '', '', '', '']
            },
            yaxis: {
                l");
                WriteLiteral(@"abels: {
                    show: false
                }
            },

            legend: {
                show: false
            },
        }
        var chartColumn = new ApexCharts(
            document.querySelector(""#columnchart""),
            optionsColumn
        );
        chartColumn.render();

        document.getElementById(""spark1Amount"").innerHTML = ""0"";
        document.getElementById(""spark2Amount"").innerHTML = ""0"";
        document.getElementById(""spark3Amount"").innerHTML = ""0"";
        document.getElementById(""spark4Amount"").innerHTML = ""0"";


");
                WriteLiteral("\r\n    </script>\r\n\r\n");
            }
            );
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; }
    }
}
#pragma warning restore 1591
